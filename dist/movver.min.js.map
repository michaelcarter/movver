{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/movver.js"],"names":[],"mappings":"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","file":"movver.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var Movver = (function() {\n\n  Movver.prototype.attachedElements = [];\n  Movver.prototype.touchStartOffsets = [];\n  Movver.prototype.touchEndOffsets = [];\n  Movver.prototype.viewableLowerBoundary = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n  Movver.prototype.MAX_TOUCH_OFFSETS = 2;\n  Movver.prototype.FOCUS_PERCENTAGE_THRESHOLD = 80;\n  Movver.prototype.DEBUG = false;\n\n  function Movver(opts) {\n    if (opts.maxTouchOffsets) this.MAX_TOUCH_OFFSETS = opts.maxTouchOffsets;\n    if (opts.focusPercentageThreshold) this.FOCUS_PERCENTAGE_THRESHOLD = opts.focusPercentageThreshold;\n    if (!!opts.debug) this.DEBUG = true;\n    this._addListeners();\n  }\n\n  Movver.prototype.attach = function(element, callback) {\n    if (typeof element !== \"object\") throw new Error(\"Element must be an object.\");\n    if (typeof callback !== \"function\") throw new Error(\"Callback must be a function.\");\n    this.attachedElements.push([element, callback]);\n  }\n\n  // PRIVATE FUNCTIONS\n  // ================= //\n  Movver.prototype._arrayAverage = function(arrayOfIntegers) {\n    var sum = arrayOfIntegers.reduce(function(a, b) { return a + b });\n    return sum / arrayOfIntegers.length;\n  }\n\n  Movver.prototype._calculateFocusPercentage = function(element) {\n    var elementBoundingClientRect = element.getBoundingClientRect();\n    var elementMidPoint = (elementBoundingClientRect.top + elementBoundingClientRect.bottom) / 2\n    var result = (elementMidPoint / (this.viewableLowerBoundary/2)) * 100;\n    if (result > 100) result = 200-result;\n    return (result < 0) ? 0 : result;\n  }\n\n  // DEBUG only functions, for highlighting what's focussed on the page.\n  // =================================================================== //\n  Movver.prototype._fillRect = function(element, focusPercentage) {\n    var brightness = (255/100) * focusPercentage;\n    element.style.backgroundColor = 'rgb(0,'+Math.round(brightness)+',0)';\n  }\n\n  Movver.prototype._setVisibleBounds = function() {\n    var el = document.getElementById(\"thumbArea\");\n    el.style.top = this.viewableLowerBoundary+\"px\";\n    el.style.height = (document.documentElement.clientHeight - this.viewableLowerBoundary) + \"px\";\n  }\n\n  // Document listeners\n  // ================== //\n  Movver.prototype._addListeners = function() {\n    var self = this;\n\n    document.addEventListener('touchstart', function(e) {\n      self.touchStartOffsets.push(e.touches[0].pageY - e.view.scrollY);\n      if (self.touchStartOffsets.length > self.MAX_TOUCH_OFFSETS) self.touchStartOffsets.shift();\n    });\n\n    document.addEventListener('touchend', function(e) {\n      self.touchEndOffsets.push(e.changedTouches[0].pageY - e.view.scrollY);\n      if (self.touchEndOffsets.length > self.MAX_TOUCH_OFFSETS) self.touchEndOffsets.shift();\n      self.viewableLowerBoundary = Math.min(Math.round(self._arrayAverage(self.touchEndOffsets)), Math.round(self._arrayAverage(self.touchStartOffsets)));\n      if (self.DEBUG) self._setVisibleBounds();\n    });\n\n    window.onscroll = function() {\n      self.attachedElements.forEach(function(elAndCallback) {\n        var el = elAndCallback[0];\n        var callback = elAndCallback[1];\n        var focusPercentage = self._calculateFocusPercentage(el);\n        if (focusPercentage >= self.FOCUS_PERCENTAGE_THRESHOLD) {\n          callback(el);\n        }\n        if (self.DEBUG) self._fillRect(el, focusPercentage);\n      });\n    }  \n  }\n\n  return Movver;\n})();\n\nwindow.onload = function() {\n  var movver = new Movver({debug: true});\n  var elementIds = [\"para1\", \"para2\", \"para3\", \"para4\", \"para5\", \"para6\", \"para7\", \"para8\", \"para9\", \"para10\"];\n  elementIds.forEach(function(id) {\n    movver.attach(document.getElementById(id), function(el) {\n      console.log(\"focussed:\", el);\n    });\n  });\n}"],"sourceRoot":"/source/"}